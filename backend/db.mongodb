// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('Kost');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.sales.drop();

// Insert a few documents into the sales collection.
db.apps.insertMany([
  { '_id': 1, 'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date() },
  { '_id': 2,'name': 'mail_api', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date() },
  { '_id': 3,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date() },
  { '_id': 4,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date()  },
  { '_id': 5,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date()  },
  { '_id': 6,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date()  },
  { '_id': 7,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date() },
  { '_id': 8,'name': 'application', 'domain': 'Corporate', 'app': 'Easymail', 'build':['python'],'code_scan':['sonar', 'checkmarx'], 'package':['docker'], 'date': new Date() },
]);

// Run a find command to view items sold on April 4th, 2014.
// db.col.find();
// db.col.find({name: "nitin"});
db.col.findOne()

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
